// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: myrpc.proto

package bar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyrpcClient is the client API for Myrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyrpcClient interface {
	//*
	//xxd sd sd sd
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// pong comment
	Pong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type myrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMyrpcClient(cc grpc.ClientConnInterface) MyrpcClient {
	return &myrpcClient{cc}
}

func (c *myrpcClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/myrpc.myrpc/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myrpcClient) Pong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/myrpc.myrpc/pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyrpcServer is the server API for Myrpc service.
// All implementations must embed UnimplementedMyrpcServer
// for forward compatibility
type MyrpcServer interface {
	//*
	//xxd sd sd sd
	Ping(context.Context, *Request) (*Response, error)
	// pong comment
	Pong(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedMyrpcServer()
}

// UnimplementedMyrpcServer must be embedded to have forward compatible implementations.
type UnimplementedMyrpcServer struct {
}

func (UnimplementedMyrpcServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMyrpcServer) Pong(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (UnimplementedMyrpcServer) mustEmbedUnimplementedMyrpcServer() {}

// UnsafeMyrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyrpcServer will
// result in compilation errors.
type UnsafeMyrpcServer interface {
	mustEmbedUnimplementedMyrpcServer()
}

func RegisterMyrpcServer(s grpc.ServiceRegistrar, srv MyrpcServer) {
	s.RegisterService(&Myrpc_ServiceDesc, srv)
}

func _Myrpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyrpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myrpc.myrpc/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyrpcServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myrpc_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyrpcServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myrpc.myrpc/pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyrpcServer).Pong(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Myrpc_ServiceDesc is the grpc.ServiceDesc for Myrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Myrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myrpc.myrpc",
	HandlerType: (*MyrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _Myrpc_Ping_Handler,
		},
		{
			MethodName: "pong",
			Handler:    _Myrpc_Pong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myrpc.proto",
}
